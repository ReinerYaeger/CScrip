{"docstore/metadata": {"a8a0244b-324f-4529-b284-09180083fed7": {"doc_hash": "1bf84643096ba1f3859ad447a3829bc1aba140587da77a4a8b61f049a6c22d36"}, "897db570-7b45-4fdd-98c1-3a5c6297de09": {"doc_hash": "851feaaab40ff13a54007a73d58ac4f2e02e02f65ca045d3ac753d969fc5b092", "ref_doc_id": "a8a0244b-324f-4529-b284-09180083fed7"}}, "docstore/data": {"897db570-7b45-4fdd-98c1-3a5c6297de09": {"__data__": {"id_": "897db570-7b45-4fdd-98c1-3a5c6297de09", "embedding": null, "metadata": {"file_path": "C:\\Users\\matth\\OneDrive\\Documents\\GitHub\\CScrip\\chatgpt\\data\\data.txt", "file_name": "data.txt", "file_type": "text/plain", "file_size": 3901, "creation_date": "2024-04-06", "last_modified_date": "2024-04-06"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a8a0244b-324f-4529-b284-09180083fed7", "node_type": "4", "metadata": {"file_path": "C:\\Users\\matth\\OneDrive\\Documents\\GitHub\\CScrip\\chatgpt\\data\\data.txt", "file_name": "data.txt", "file_type": "text/plain", "file_size": 3901, "creation_date": "2024-04-06", "last_modified_date": "2024-04-06"}, "hash": "1bf84643096ba1f3859ad447a3829bc1aba140587da77a4a8b61f049a6c22d36", "class_name": "RelatedNodeInfo"}}, "text": "S' -> program_start\r\nprogram_start -> program | statement | data_structure\r\ndata_structure -> class | struct | list_structure | array |empty\r\nlist_structure | list\r\nprogram | type_declaration main_statement left_curl_op statement right_curl_op | type_declaration main_statement left_par_op type_declaration identifier right_par_op left_curl_op statement right_curl_op\r\ntype_declaration -> int_declaration | float_declaration | double_declaration | string_declaration | char_declaration\r\nstatement -> function_call_statement | conditional_statement | loop_statement | arithmetic_statement | break_state | return_state | function_declaration_statement | printed_statement\r\nbreak_state -> break_statement\r\nprinted_statement -> print_statement literal_or_identifier | print_statement literal_or_identifier comma_statement identifier\r\nreturn_state -> return_statement literal_or_identifier | return_statement statement\r\nconditional_statement -> if_block | if_block elif_block | if_block else_block | left_par_op inequalities right_par_op | left_par_op inequalities right_par_op question_op left_curl_op statement colon_statement statement right_curl_op\r\nif_block -> if_statement inequalities left_curl_op statement right_curl_op\r\nelse_block -> else_statement left_curl_op statement right_curl_op\r\nelif_block -> elif_statement inequalities left_curl_op statement right_curl_op\r\ninequalities -> literal_or_identifier inequalities_sym literal_or_identifier\r\ninequalities_sym -> equivalent_op | less_or_eq_op |  great_or_eq_op | less_op | great_op | and | or | bool_literal | not_equal | <empty>\r\nfunction_declaration_statement -> literal_or_identifier left_par_op function_parameter right_par_op left_curl_op statement right_curl_op\r\nfunction_parameter -> literal_or_identifier | literal_or_identifier comma_statement function_parameter\r\nliteral_or_identifier -> identifier | data_literal\r\nfunction_call_statement -> literal_or_identifier left_par_op function_parameter right_par_op\r\nloop_statement -> while_statement inequalities left_curl_op statement right_curl_op | for_statement arithmetic_statement semi_colon_statement left_curl_op statement right_curl_op | for_statement arithmetic_statement semi_colon_statement inequalities semi_colon_statement arithmetic_statement left_curl_op statement right_curl_op\r\narithmetic_statement -> arithmetic_expr | arithmetic_statement -> unary_op\r\nunary_op -> identifier increment | unary_op -> identifier decrement\r\narithmetic_expr -> identifier assign_op arithmetic_expr | arithmetic_expr arithmetic_op arithmetic_expr | left_par_op arithmetic_expr right_par_op | literal_or_identifier | identifier assign_op function_call_statement\r\narithmetic_op -> expo_op | mul_op | div_op | add_op | sub_op\r\ndata_literal -> int_literal | float_literal | double_literal | char_literal | string_literal\r\nempty -> <empty>\r\nclass = class\r\nstruct = struct\r\nlist = list\r\narray = array\r\nincrement = ++\r\ndecrement = --\r\nequivalent_op = =\r\nassign_op = =\r\nprint_statement = print\r\nadd_op = \\+\r\nsub_op = -\r\nexpo_op = **\r\nmul_op = *\r\ndiv_op = /\r\nless_or_eq_op = <=\r\ngreat_or_eq_op = >=\r\nand = & &\r\nor = ||\r\nless_op = <\r\ngreat_op = >\r\nleft_par_op = (\r\nright_par_op = )\r\nleft_curl_op = {\r\nright_curl_op = }\r\nleft_square_op = [\r\nright_square_op = ]\r\nquestion_op = ?\r\nnot_equal = !=\r\nif_statement = if\r\nelif_statement = elif\r\nelse_statement = else\r\nwhile_statement = while\r\nfor_statement = for\r\ndo_statement = do\r\nbreak_statement = break\r\nreturn_statement = return\r\nfull_stop_statement = .\r\ncomma_statement = ,\r\ncolon_statement = :\r\nsemi_colon_statement = ;\r\nsingle_quotes = '\r\ndouble_quotes = \"\r\nint_declaration = int\r\nfloat_declaration = float\r\ndouble_declaration = double\r\nstring_declaration = string\r\nchar_declaration = char\r\nfloat_literal = (\\.\\d+)?.\\d+f\r\ndouble_literal = \\d+\\.\\d+\r\nstring_literal = \\'[^\\']*\\'|\\\"[^\\\"]*\\\r\nchar_literal = [\\'a-zA-Z\\']\r\nidentifier = [a-zA-Z_][a-zA-Z_\\d+]*", "start_char_idx": 0, "end_char_idx": 3899, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"a8a0244b-324f-4529-b284-09180083fed7": {"node_ids": ["897db570-7b45-4fdd-98c1-3a5c6297de09"], "metadata": {"file_path": "C:\\Users\\matth\\OneDrive\\Documents\\GitHub\\CScrip\\chatgpt\\data\\data.txt", "file_name": "data.txt", "file_type": "text/plain", "file_size": 3901, "creation_date": "2024-04-06", "last_modified_date": "2024-04-06"}}}}